import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { MatTableDataSource } from '@angular/material/table';
import { AbstractControl, FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';
import { DomSanitizer } from '@angular/platform-browser';
import { Besoin, TypeBesoin } from 'app/models/besoin';
import { FileHandle } from 'app/models/file-handle.model';
import { ActivatedRoute, Router } from '@angular/router';
import { BesoinService } from 'app/services/besoin.service';
import { trigger, state, style, animate, transition } from '@angular/animations';
import {AngularFireStorage, AngularFireUploadTask} from '@angular/fire/compat/storage';
import { Observable } from 'rxjs';
import { UserService } from 'app/services/users/user.service';
import { TokenStorageService } from 'app/services/users/token-storage.service';
@Component({
  selector: 'app-add-besoin',
  templateUrl: './add-besoin.component.html',
  styleUrls: ['./add-besoin.component.css']
})
export class AddBesoinComponent implements OnInit {
  selectedFile: File | null = null;
  besoins: any[];
  selectedBesoin: Besoin | null = null;
  b :Besoin= new Besoin();
  newBesoin: Besoin = {
    besoinId: 0,
    title: '',
    description: '',
    date: new Date(),
    image: [],
    //type: null, 
    type: '',
    imagePath: '',
  }
  selectedType: TypeBesoin = TypeBesoin.Affiche;
  types = Object.values(TypeBesoin);  
 // images: FileHandle[] = []; 

  besoinForm: FormGroup;
  isLoggedIn = false;
  constructor(private route: ActivatedRoute,private tokenStorageService: TokenStorageService,private userService: UserService,private http: HttpClient, private  af:AngularFireStorage ,private besoinService: BesoinService, private fb: FormBuilder, private  sanitizer: DomSanitizer,private router: Router ) {
    this.besoinForm = this.fb.group({
      title: ['', Validators.required],
      description: ['', Validators.required],
      date: [null, Validators.required],
      type: [''],
       photo: ['']  // photo: [null, [Validators.required, this.validateFileType]],
    });
  }
  
  content?: string;
  ngOnInit(): void  {

   
    this.loadBesoins();
    this.besoinForm = this.fb.group({
      title: ['', [Validators.required]],
      description: ['', [Validators.required]],
      date: ['', [Validators.required]],
      type: [''],
     // photo: [null, [Validators.required, this.validateFileType]],
    });
    //this.isLoggedIn = !!this.tokenStorageService.getToken();
    // Initialization logic goes here
    this.initializeComponent();
   // Example: Load user data after component initialization
   //this.loadUserData();


    this.userService.getUserBoard().subscribe(
      data => {
        this.content = data;
      },
      err => {
        this.content = JSON.parse(err.error).message;
      }
    );
  }
  
  
  buttonState = 'idle';

  animateButton(state: string): void {
    this.buttonState = state;
  }
  
  

  loadBesoins(): void {
    this.loadUserData()
    this.besoinService.getAllBesoins().subscribe(data => {
      this.besoins = data;
    },
    error => {
      console.error('Erreur lors du chargement des livrables', error);
    }
  );
}













  selectBesoin(besoin: Besoin): void {
    this.selectedBesoin = { ...besoin };
  }

  @ViewChild('fileInput') fileInput: ElementRef;
  file: File = null; // Variable to store file to Upload
  



  addBesoin(): void {
    if (this.besoinForm.valid) {
      // Get the new besoin data from the form
      const newBesoin: Besoin = {
        ...this.besoinForm.value,
        idBesoin: 0, // Assuming this is auto-generated by the server
      };
  
      // Get the UserId from the route parameters
      let UserId: number;
      this.route.params.subscribe(params => {
        UserId = +params['UserId'];
        console.log('User ID:', UserId);
      });
  
      // Add the new besoin with the UserId
      this.besoinService.addBesoin(newBesoin, UserId).subscribe(
        () => {
          // Reload the list of besoins after adding a new besoin
          this.loadBesoins();
  
          // Reset the form after successful addition
          this.besoinForm.reset();
          this.fileInput.nativeElement.value = null; // Reset the file input
        },
        (error) => {
          // Handle errors
          console.error('Error adding Besoin:', error);
        }
      );
    }
  }
  
updateMode = false; // Track whether form is in update mode
 updateId: number | null = null; 


  prepareFromData(besoin: Besoin): FormData{ 
    const formData = new FormData() ;
    formData.append('besoin', 
    new Blob([JSON.stringify(besoin)],{type: 'application/json' })
    );
    for(var i=0; i< besoin.image.length;i++){
      formData.append("iimageFile",
      besoin.image[i].file ,
      besoin.image[i].file.name 
      );
    }
return formData;
  }




  onFileSElected(event) {
    if (event.target.files) {
    const file = event.target.files[0];
    const fileHandle : FileHandle  = {
      file: file,
      url: this.sanitizer.bypassSecurityTrustUrl(
        window.URL.createObjectURL(file)
        )
    }
    this.newBesoin.image.push(fileHandle);

    //console.log(event)

  }}


  
  
  
  
  

  
  isEditing: boolean = false;

  // ...
  
  updateBesoin(besoin: Besoin): void {
    console.log('Data to be sent:', besoin);
    this.besoinService.updateBesoin(besoin).subscribe(
      updatedBesoin => {
        console.log('Livrable mis à jour avec succès', updatedBesoin);
        this.loadBesoins();
        this.selectedBesoin = { ...updatedBesoin }; // Update selectedBesoin with the response
        this.isEditing = true;  // Set isEditing to true
      },
      error => {
        console.error('Erreur lors de la mise à jour du livrable', error);
      }
    );
  }

  saveUpdate(besoin: Besoin): void {
    console.log('Data to be sent:', besoin);
    this.besoinService.updateBesoin(besoin).subscribe(
      updatedBesoin => {
        console.log('Livrable mis à jour avec succès', updatedBesoin);
        this.loadBesoins();
        this.selectedBesoin = { ...updatedBesoin }; // Update selectedBesoin with the response
        this.isEditing = false;  // Set isEditing to true
      },
      error => {
        console.error('Erreur lors de la mise à jour du livrable', error);
      }
    );
  }
  
  cancelUpdate(): void {
    this.selectedBesoin = null;
    this.isEditing = false;  // Reset isEditing to false
  }
 /* onFileChange(event: any) {
    const file = event.target.files[0];
  
    if (file) {
      this.besoinForm.patchValue({
        photo: file
      });
      this.besoinForm.get('photo').updateValueAndValidity();
    }
  }*/

  
  deleteBesoin(idBesoin: number) {
    console.log('Deleting Besoin with ID:', idBesoin);
  
    this.besoinService.deleteBesoin(idBesoin).subscribe(
      response => {
        console.log('Livrable supprimé avec succès', response);
        this.loadBesoins();
      },
      error => {
        console.error('Erreur lors de la suppression du livrable', error);
      }
    );
  }
  besoinss: Besoin[] = [];
  
  navigateToAddLivrable(): void {
    this.router.navigate(['/add-livrable']); // Assuming 'add-livrable' is your route
  }
  displayedColumns: string[] = ['besoinId', 'title', 'description', 'date', 'image', 'actions'];
  dataSource = new MatTableDataSource<Besoin>(this.besoinss);






private initializeComponent(): void {
  // Example initialization logic
  const token = this.tokenStorageService.getToken();
  const user = this.tokenStorageService.getUser();

  console.log('Token:', token);
  console.log('User:', user);
}



loadUserData(): void {
  const token = this.tokenStorageService.getToken();

  // Check if token is available
  if (token) {
    // Prepare headers with Authorization token
    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`
    });

    // Make HTTP request with headers
    this.http.get<any>('http://localhost:8090/api/test/user', { headers }).subscribe(
      response => {
        // Handle successful response
        console.log('User data:', response);
      },
      error => {
        // Handle error response (e.g., 401 Unauthorized)
        console.error('Error fetching user data:', error);
      }
    );
  } else {
    console.error('No token available. User not authenticated.');
  }
}
}